@using System.Text
@using Property365.Web.Components.Rendering
@using Microsoft.JSInterop
@inherits Property365HtmlEditorButtonBase
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<EditorButton Title=@Title Click=@OnClick Icon="insert_link" />

@code {
    protected override async Task OnClick()
    {
        await Editor.SaveSelectionAsync();

        bool blank = false;

        var attributes = await JSRuntime.InvokeAsync<LinkAttributes>("Property365Components.selectionAttributes", "a", new[] {"innerText",
"href", "target" });

        if (attributes.Target == "_blank")
        {
            blank = true;
        }

        var result = await DialogService.OpenAsync(Title, ds =>
    @<div class="rz-html-editor-dialog">
        <div class="rz-html-editor-dialog-item">
            <label>@UrlText</label>
            <Property365TextBox @bind-Value=@attributes.Href style="width: 100%" />
        </div>
        @if (string.IsNullOrWhiteSpace(attributes.InnerHtml) || attributes.InnerHtml == "<br>")
        {
        <div class="rz-html-editor-dialog-item">
            <label>@LinkText</label>
            <Property365TextBox @bind-Value=@attributes.InnerText style="width: 100%" />
        </div>
        }
        <div class="rz-html-editor-dialog-item">
            <Property365CheckBox @bind-Value=@blank />
            <label>@OpenInNewWindowText</label>
        </div>
        <div class="rz-html-editor-dialog-buttons">
            <Property365Button Text=@OkText Click="()=> ds.Close(true)" />
            <Property365Button Text=@CancelText Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>);

        await Editor.RestoreSelectionAsync();

        if (result == true && !String.IsNullOrEmpty(attributes.Href))
        {
            var html = new StringBuilder();
            html.AppendFormat("<a href=\"{0}\"", attributes.Href);
            if (blank)
            {
                html.Append(" target=\"_blank\"");
            }

            html.AppendFormat(">{0}</a>", string.IsNullOrEmpty(attributes.InnerText) ? attributes.InnerHtml : attributes.InnerText);

            await Editor.ExecuteCommandAsync("insertHTML", html.ToString());
        }

    }
}