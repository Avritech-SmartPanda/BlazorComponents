@using Microsoft.JSInterop
@using System.Reflection;
@inject IJSRuntime JSRuntime
@implements IDisposable
<div class="rz-dialog-wrapperx flex fixed w-full h-full top-0 bottom-0 z-[1001] items-center justify-center">
    <div @ref="dialog" class="h-full bg-gray-100  overflow-hidden rounded-none max-h-full flex flex-col static" role="dialog" aria-labelledby="rz-dialog-0-label" style=@Style>
        @if (Dialog.Options.ShowTitle)
        {
            @if (Dialog.Options.Draggable)
            {
                <Draggable Drag="@OnDrag" DragStart="@OnDragStart">
                    <div class="rz-dialog-titlebarx bg-white px-5 pt-5 pb-2 text-3xl border-b-none">
                        <div class="rz-dialog-titlex font-bold text-primary-900 inline" id="rz-dialog-0-label">@((MarkupString)Dialog.Title)</div>
                        @if (Dialog.Options.ShowClose)
                        {
                            <a href="javascript:void(0)" @onclick=@Close role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close">
                                <span class="rzi rzi-times"></span>
                            </a>
                        }
                    </div>
                </Draggable>
            }
            else
            {
                <div class="rz-dialog-titlebarx bg-white px-5 pt-5 pb-2 text-3xl border-b-none">
                    <div class="rz-dialog-titlex font-bold text-primary-900 inline" id="rz-dialog-0-label">@((MarkupString)Dialog.Title)</div>
                    @if (Dialog.Options.ShowClose)
                    {
                        <a href="javascript:void(0)" @onclick=@Close role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close">
                            <span class="rzi rzi-times"></span>
                        </a>
                    }
                </div>
            }
        }
        <div class="h-full flex-initial overflow-auto">
            @if (Dialog.Options.ChildContent != null)
            {
                @Dialog.Options.ChildContent(Service)
            }
            else
            {
                @ChildContent
            }
        </div>
    </div>
    @if (Dialog.Options.CloseDialogOnOverlayClick)
    {
        <div @onclick="@Close" class="rz-dialog-maskx z-[1000] fixed w-full h-full top-0 left-0 opacity-50  bg-[#010917]"></div>
    }
    else
    {
        <div class="rz-dialog-maskx z-[1000] fixed w-full h-full top-0 left-0 opacity-50  bg-[#010917]" ></div>
    }
</div>

@code {
    ElementReference dialog;

    string left;
    string top;
    string height;
    string width;

    double clientX;
    double clientY;

    async Task OnDragStart(DraggableEventArgs args)
    {
        clientX = args.ClientX;
        clientY = args.ClientY;

        shouldRender = false;
        var rect = await JSRuntime.InvokeAsync<Rect>("Property365Components.clientRect", dialog);
        height = $"height: {rect.Height}px;";
        width = $"width: {rect.Width}px;";

        shouldRender = true;
    }

    void OnDrag(DraggableEventArgs args)
    {
        left = $"left: {args.Rect.Left + (args.ClientX - clientX)}px;";
        top = $"top: {args.Rect.Top + (args.ClientY - clientY)}px;";
    }

    bool shouldRender = true;
    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    [Parameter]
    public Dialog Dialog { get; set; }

    RenderFragment ChildContent => new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Dialog.Type);

            if (Dialog.Parameters != null)
            {
                foreach (var parameter in Dialog.Parameters)
                {
                    builder.AddAttribute(1, parameter.Key, parameter.Value);
                }
            }

            builder.AddComponentReferenceCapture(2, component => reference = component);

            builder.CloseComponent();
        });

    object reference;

    void Close()
    {
        Service.Close();
    }

    string Style
    {
        get
        {
            var baseStyle = "min-width: 150px; min-height: 150px; z-index: 1001; opacity: 1;position:absolute;";
            var widthStyle = !string.IsNullOrEmpty(width) ? width : string.IsNullOrEmpty(Dialog.Options.Width) ? "" : $"width: {Dialog.Options.Width};";
            var heightStyle = !string.IsNullOrEmpty(height) ? height : string.IsNullOrEmpty(Dialog.Options.Height) ? "" : $"height: {Dialog.Options.Height};";
            var topStyle = !string.IsNullOrEmpty(top) ? top : string.IsNullOrEmpty(Dialog.Options.Top) ? "" : $"top: {Dialog.Options.Top};";
            var leftStyle = !string.IsNullOrEmpty(left) ? left :string.IsNullOrEmpty(Dialog.Options.Left) ? "" : $"left: {Dialog.Options.Left};";
            var bottomStyle = string.IsNullOrEmpty(Dialog.Options.Bottom) ? "" : $"bottom: {Dialog.Options.Bottom};";
            var resizeStyle = Dialog.Options.Resizable ? "resize:both;" : "";

            return $"{baseStyle}{widthStyle}{heightStyle}{topStyle}{leftStyle}{bottomStyle}{resizeStyle}{Dialog.Options.Style}";
        }
    }

    [Inject] 
    DialogService Service { get; set; }

    protected override void OnInitialized()
    {
        Service.OnRefresh += OnRefresh;
    }

    void OnRefresh()
    {
        var stateHasChanged = reference?.GetType().GetMethod("StateHasChanged", BindingFlags.NonPublic | BindingFlags.Instance);

        InvokeAsync(() => 
        {
            StateHasChanged();
            stateHasChanged?.Invoke(reference, null);
        })
        .ConfigureAwait(false);
    }

    public void Dispose()
    {
        Service.OnRefresh -= OnRefresh;
    }
}