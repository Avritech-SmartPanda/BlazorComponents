@page "/example-upload"

<Property365ComponentContainer Name="Upload">
<div class="grid grid-cols-3 gap-4">
     
                <Property365Card>
                    <h4 class="mb-4">Single file upload</h4>
                    <Property365Upload Url="upload/single" Progress=@(args => OnProgress(args, "Single file upload")) class="w-full">
                    </Property365Upload>
                </Property365Card>
          
                <Property365Card>
                    <h4 class="mb-4">Upload with icon</h4>
                    <Property365Upload Url="upload/single" Icon="upload" ChooseText="" Progress=@(args => OnProgress(args, "Upload with icon"))>
                    </Property365Upload>
                </Property365Card>
          
                <Property365Card>
                    <h4 class="mb-4">Custom HTTP headers</h4>
                    <Property365Upload Url="upload/single" Progress=@(args => OnProgress(args, "Custom HTTP headers")) class="w-full">
                        <Property365UploadHeader Name="Authorization" Value="Bearer <token>" />
                        <Property365UploadHeader Name="X-Uploaded-By" Value="Property365" />
                    </Property365Upload>
                </Property365Card>
           
                <Property365Card>
                    <h4 class="mb-4">Multiple files upload</h4>
                    <Property365Upload Multiple="true" Url="upload/multiple" Progress=@(args => OnProgress(args, "Multiple files upload")) class="w-full" />
                </Property365Card>
           
                <Property365Card>
                    <h4 class="mb-4">Upload images only</h4>
                    <Property365Upload Multiple="true" Accept="image/*" Url="upload/multiple" Progress=@(args => OnProgress(args, "Images only upload")) class="w-full" />
                </Property365Card>
           
                <Property365Card>
                    <h4 class="mb-4">Upload with additional parameter</h4>
                    <Property365Upload Multiple="true" Accept="image/*" Url=@($"upload/{customParameter}") Progress=@(args => OnProgress(args, "Upload with additional parameter")) Class="w-full" />
                </Property365Card>
           
                <Property365Card>
                    <h4 class="mb-4">Upload Complete event</h4>
                    <Property365Upload Url="upload/single" Complete=@OnComplete class="w-full" />
                </Property365Card>
           
                <Property365Card>
                    <h4 class="mb-4">Manual Upload</h4>
                    <Property365Upload @ref="upload" Auto="false" Multiple="true" Url="upload/multiple" Change=@(args => OnChange(args, "Manual Upload"))
                            Progress=@(args => OnProgress(args, "Manual Upload")) class="w-full" />
                             <Property365ProgressBar Value=@progress  Visible=@showProgress />
                    <Property365Button Text="Upload" Click=@(args => upload.Upload()) class="block mt-4" />
                </Property365Card>
           


                <Property365Card>
                    <h4 class="mb-4">Using Property365ProgressBar</h4>
                    <Property365Upload Url="upload/single" Progress=@TrackProgress Complete=@CompleteUpload class="w-full" />
                    <Property365ProgressBar Value=@progress class="mt-4" Visible=@showProgress />
                    <Property365Label Visible=@showComplete class="mt-4" Text="Upload Complete!" />
                </Property365Card>
           
   
</div>
</Property365ComponentContainer>

<EventConsole @ref=@console Class="mt-4" />

@code {
    EventConsole console;

    Property365Upload upload;

    int progress;
    bool showProgress;
    bool showComplete;

    void CompleteUpload()
    {
        showProgress = false;
        showComplete = true;
    }

    void TrackProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;
    }

    int customParameter = 1;

    void OnChange(UploadChangeEventArgs args, string name)
    {
        
        foreach (var file in args.Files)
        {
            console.Log($"File: {file.Name} / {file.Size} bytes");
        }

        console.Log($"{name} changed");
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnComplete(UploadCompleteEventArgs args)
    {
        console.Log($"Server response: {args.RawResponse}");
    }
}