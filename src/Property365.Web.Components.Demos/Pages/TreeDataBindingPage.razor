@page "/tree-data-binding"
@using Microsoft.EntityFrameworkCore
@using Property365.Web.Components.Demos.Models.Northwind
@inject Property365.Web.Components.Demos.Data.NorthwindContext Northwind

<h1>Tree data-binding</h1>
<p>Populate Property365Tree from a database via Entity Framework</p>
<Property365ComponentContainer Name="Tree" Source="TreeDataBinding" Heading="false">
    <div class="row">
        <div class="col-md-4">
            <Property365Card>
                <h4>Data-binding to Categories &#8250; Products</h4>
                <p class="mb-3">Data from different tables.</p>
                <Property365Tree Style="height: 300px" Data=@categories>
                    <Property365TreeLevel TextProperty="CategoryName" ChildrenProperty="Products" />
                    <Property365TreeLevel TextProperty="ProductName" HasChildren=@(product => false) />
                </Property365Tree>
            </Property365Card>
        </div>
        <div class="col-md-4">
            <Property365Card>
                <h4>Data-binding to Employees</h4>
                <p class="mb-3">Data from a single self-referencing table.</p>
                <Property365Tree Data=@employees Style="height: 300px">
                    <Property365TreeLevel TextProperty="LastName" ChildrenProperty="Employees1" 
                        Expanded=@ShouldExpand HasChildren=@(e => (e as Employee).Employees1.Any()) 
                    />
                </Property365Tree>
            </Property365Card>
        </div>
        <div class="col-md-4">
            <Property365Card>
                <h4>Load children on demand</h4>
                <p class="mb-3">Populate children on parent expand.</p>
                <Property365Tree Data=@categories Expand=@OnExpand Style="height: 300px">
                    <Property365TreeLevel TextProperty="CategoryName"/>
                </Property365Tree>
            </Property365Card>
        </div>
    </div>
</Property365ComponentContainer>

@code {
    IEnumerable<Category> categories;
    IEnumerable<Employee> employees;
    
    bool ShouldExpand(object data)
    {
        var employee = data as Employee;

        return employee.LastName == "Fuller";
    }

    void OnExpand(TreeExpandEventArgs args)
    {
        var category = args.Value as Category;

        args.Children.Data = category.Products;
        args.Children.TextProperty = "ProductName";
        args.Children.HasChildren = (product) => false;

        /* Optional template
        args.Children.Template = context => builder => {
            builder.OpenElement(1, "strong");
            builder.AddContent(2, (context.Value as Product).ProductName);
            builder.CloseElement();
        };
        */
    }

    protected override void OnInitialized()
    {
        categories = Northwind.Categories.Include(c => c.Products);
        var allEmployees = Northwind.Employees.Include(e => e.Employees1).ToList();
        employees = allEmployees.Where(e => e.ReportsTo == null);
    }
}