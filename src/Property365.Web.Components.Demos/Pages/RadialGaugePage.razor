@page "/radial-gauge"

<h1>Property365 Blazor Radial Gauge</h1
<Property365ComponentContainer Name="RadialGauge" Heading="false">
<div class="container">
    <div class="row">
        <div class="col-sm-12 col-lg-4 my-lg-5 order-lg-last text-center text-lg-left">
            <p>
                <label><span class="d-block mt-3 mb-1">Value</span><Property365Slider Min="0" Max="260" @bind-Value=@value Style="width: 200px;" /></label>
            </p>
            <p>
                <label><span class="d-block mt-3 mb-1">Tick position</span><Property365DropDown @bind-Value=@tickPosition Data=@tickPositions Style="width: 200px;" /> </label>
            </p>
            <p>
                <label class="mt-3"><Property365CheckBox @bind-Value=@showValue /> Show the pointer value</label>
            </p>
        </div>
        <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
            <Property365RadialGauge Style="width: 100%; height: 300px;">
                <Property365RadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="0" Max="260" TickPosition=@tickPosition>
                    <Property365RadialGaugeScalePointer Value=@value Length="0.6" ShowValue=@showValue>
                        <Template Context="pointer">
                            <h4>
                                @pointer.Value <sup>km/h</sup>
                            </h4>
                        </Template>
                    </Property365RadialGaugeScalePointer>
                    <Property365RadialGaugeScaleRange From="0" To="90" Fill="green" />
                    <Property365RadialGaugeScaleRange From="90" To="140" Fill="orange" />
                    <Property365RadialGaugeScaleRange From="140" To="260" Fill="red" />
                </Property365RadialGaugeScale>
            </Property365RadialGauge>
        </div>
    </div>
</div>
</Property365ComponentContainer>

@code {
    bool showValue = true;
    double value = 100;
    IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    GaugeTickPosition tickPosition = GaugeTickPosition.Inside;
}