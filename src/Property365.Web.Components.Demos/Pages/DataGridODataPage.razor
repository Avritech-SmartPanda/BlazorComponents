@page "/datagrid-odata"
@using Property365.Web.Components.Demos.Data
@using Property365.Web.Components.Demos.Models.Northwind

@inject NorthwindODataService service

<h1>DataGrid <strong>OData</strong></h1>

<p>Use the <code>LoadData</code> event to get data from a REST service.</p>

<Property365ComponentContainer Name="DataGrid" Source="DataGridOData" Heading="false" AdditionalSourceCodePages="@(new [] {"../Services/NorthwindODataService.cs"})">
<Property365DataGrid IsLoading="@isLoading" Count="@count" Data="@employees" LoadData="@LoadData" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Center" TItem="Employee" ColumnWidth="200px">
    <Columns>
        <Property365DataGridColumn TItem="Employee" Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <Property365DataGridColumn TItem="Employee" Title="Photo" Sortable="false" Filterable="false" Width="200px" >
            <Template Context="data">
                <Property365Image Path="@data.Photo" style="width: 40px; height: 40px; border-radius: 8px;" />
            </Template>
        </Property365DataGridColumn>
        <Property365DataGridColumn TItem="Employee" Property="FirstName" Title="First Name" />
        <Property365DataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="150px"/>
        <Property365DataGridColumn TItem="Employee" Property="Title" Title="Title" 
            Type="typeof(IEnumerable<string>)" FilterValue="@selectedTitles" FilterOperator="FilterOperator.Contains">
            <FilterTemplate>
                <Property365DropDown @bind-Value=@selectedTitles Style="width:100%"
                    Change=@OnSelectedTitlesChange Data="@(titles)" AllowClear="true" Multiple="true" />
            </FilterTemplate>
        </Property365DataGridColumn>
        <Property365DataGridColumn TItem="Employee" Property="TitleOfCourtesy" Title="Title Of Courtesy" />
        <Property365DataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" />
        <Property365DataGridColumn TItem="Employee" Property="HireDate" Title="Hire Date" FormatString="{0:d}" />
        <Property365DataGridColumn TItem="Employee" Property="Address" Title="Address" />
        <Property365DataGridColumn TItem="Employee" Property="City" Title="City" />
        <Property365DataGridColumn TItem="Employee" Property="Region" Title="Region" />
        <Property365DataGridColumn TItem="Employee" Property="PostalCode" Title="Postal Code" />
        <Property365DataGridColumn TItem="Employee" Property="Country" Title="Country" />
        <Property365DataGridColumn TItem="Employee" Property="HomePhone" Title="Home Phone" />
        <Property365DataGridColumn TItem="Employee" Property="Extension" Title="Extension" />
        <Property365DataGridColumn TItem="Employee" Property="Notes" Title="Notes" />
    </Columns>
</Property365DataGrid>
</Property365ComponentContainer>

<Property365Card class="mt-4">
    <h3>To data-bind to a service:</h3>
    <ol>
        <li>Set the Data and Count properties.
        <pre class="mt-3 p-3">
            <code>&lt;Property365DataGrid Count="@@count" Data="@@employees"</code>
        </pre>
        </li>
        <li>
            Handle the LoadData event and update the Data and Count backing fields (<code>employees</code> and <code>count</code> in this case).
        <pre class="mt-3 p-3">
            <code>
async Task LoadData(LoadDataArgs args)
{
    var result = await service.GetEmployees(filter: args.Filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, count: true);
    employees = result.Value.AsODataEnumerable();
    count = result.Count;
}
            </code>
        </pre>
        </li>
    </ol>
</Property365Card>
@code {
    bool isLoading;
    int count;
    IEnumerable<Employee> employees;

    List<string> titles = new List<string> {"Sales Representative", "Vice President, Sales", "Sales Manager", "Inside Sales Coordinator" };
    IEnumerable<string> selectedTitles;

    void OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;  
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var result = await service.GetEmployees(filter: args.Filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, count: true);
        // Update the Data property
        employees = result.Value.AsODataEnumerable();
        // Update the count
        count = result.Count;

        isLoading = false;
    }
}
