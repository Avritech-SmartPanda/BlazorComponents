@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Property365.Web.Components
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject ExampleService ExampleService
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor httpContextAccessor


<Property365Dialog />
<Property365Notification />
<Property365Tooltip />
<Property365ContextMenu />

<Property365Layout>
<Property365Header>
    <ChildContent>
        <div class="flex flex-row justify-start items-center">
            <div class="w-1/3 flex items-center">
                <Property365SidebarToggle Click="@(args => { sidebarExpanded = !sidebarExpanded; bodyExpanded = !bodyExpanded; })">
                </Property365SidebarToggle>
                <Property365Label Text="Party UI Blazor Components">
                </Property365Label>
            </div>
           
        </div>

        
    </ChildContent>
</Property365Header>
<Property365Body @ref="@body0" @bind-Expanded="@bodyExpanded">
    <ChildContent>
        <Property365ContentContainer Name="main">
            <div class="container-fluid">
                <div class="flex flex-row">
                    <div class="w-full">
                        @Body                                             
                    </div>
                </div>
            </div>
        </Property365ContentContainer>
    </ChildContent>
</Property365Body>
<Property365Sidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded" class="demos-sidebar">
    <ChildContent>
       
        <Property365PanelMenu Match="NavLinkMatch.Prefix" Click="@PanelMenuClick">
              <NavMenu />
            @*  @foreach (var category in examples)
          {
                <NavigationItem @bind-Expanded=@category.Expanded Example=@category>
                    @if (category.Children != null)
                    {
                        @foreach (var example in category.Children)
                        {
                            if (example.Children != null)
                            {
                                <NavigationItem @bind-Expanded=@category.Expanded Example=@example>
                                @foreach (var child in example.Children)
                                {
                                    <NavigationItem @bind-Expanded=@category.Expanded Example=@child />
                                }
                                </NavigationItem>
                            }
                            else
                            {
                                <NavigationItem @bind-Expanded=@category.Expanded Example=@example />
                            }
                        }
                    }
                </NavigationItem>
            }*@
        </Property365PanelMenu>
    </ChildContent>
</Property365Sidebar>
</Property365Layout>
@code {
    Property365Sidebar sidebar0;
    Property365Body body0;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;

    IEnumerable<Example> examples;

    protected override void OnInitialized()
    {

        ThemeService.Initialize(UriHelper);

        examples = ExampleService.Examples;
        

        System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value.ToString();

        examples = string.IsNullOrEmpty(term) ? ExampleService.Examples : ExampleService.Filter(term);
    }

    void ChangeTheme(object value)
    {
        var url = UriHelper.GetUriWithQueryParameter("theme", $"{value}");

        UriHelper.NavigateTo(url, true);
    }

    async Task PanelMenuClick(MenuItemEventArgs args)
    {
        if (args.Path == "/")
        { 
            await JSRuntime.InvokeVoidAsync("document.location.reload");
        }
    }
}
